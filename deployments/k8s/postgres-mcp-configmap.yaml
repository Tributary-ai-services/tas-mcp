apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-mcp-config
  namespace: tas-mcp
  labels:
    app: postgres-mcp-server
    tier: database
    component: mcp-server
data:
  # PostgreSQL MCP Server Configuration
  postgres-mcp.env: |
    # Service Configuration
    SERVICE_NAME=tas-mcp-postgres-server
    NODE_ENV=production
    
    # Database Configuration  
    READ_ONLY=true
    MAX_CONNECTIONS=10
    QUERY_TIMEOUT=30000
    
    # Health Check Configuration
    HEALTH_CHECK_ENABLED=true
    HEALTH_PORT=3401
    
    # Logging Configuration
    LOG_LEVEL=info

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-db-config
  namespace: tas-mcp
  labels:
    app: postgres-database
    tier: database
    component: database
data:
  # PostgreSQL Database Configuration
  postgres.env: |
    POSTGRES_DB=sampledb
    POSTGRES_USER=postgres
    POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C
    
  postgresql.conf: |
    # PostgreSQL Configuration for MCP Server
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 100
    
    # Memory Settings
    shared_buffers = 128MB
    effective_cache_size = 512MB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # Write Ahead Logging
    wal_level = replica
    max_wal_size = 1GB
    min_wal_size = 80MB
    
    # Query Tuning
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = off
    log_min_messages = warning
    log_min_error_statement = error
    log_statement = 'none'
    
    # Security
    ssl = off
    password_encryption = scram-sha-256
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # Local connections
    local   all             all                                     trust
    
    # IPv4 local connections
    host    all             all             127.0.0.1/32            scram-sha-256
    
    # IPv6 local connections  
    host    all             all             ::1/128                 scram-sha-256
    
    # Container network connections
    host    all             all             10.0.0.0/8              scram-sha-256
    host    all             all             172.16.0.0/12           scram-sha-256
    host    all             all             192.168.0.0/16          scram-sha-256

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: tas-mcp
  labels:
    app: postgres-database
    tier: database
    component: init-scripts
data:
  01-extensions.sql: |
    -- Enable required PostgreSQL extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Update pg_stat_statements configuration
    ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_statements';
    
  02-monitoring.sql: |
    -- Create monitoring views for MCP server
    
    -- Database size view
    CREATE OR REPLACE VIEW db_size_stats AS
    SELECT 
        datname as database_name,
        pg_size_pretty(pg_database_size(datname)) as size,
        pg_database_size(datname) as size_bytes
    FROM pg_database 
    WHERE datistemplate = false;
    
    -- Table size view
    CREATE OR REPLACE VIEW table_size_stats AS
    SELECT 
        schemaname,
        tablename,
        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,
        pg_total_relation_size(schemaname||'.'||tablename) as size_bytes,
        pg_size_pretty(pg_relation_size(schemaname||'.'||tablename)) as table_size,
        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename) - pg_relation_size(schemaname||'.'||tablename)) as index_size
    FROM pg_tables 
    WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
    ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;
    
    -- Active connections view
    CREATE OR REPLACE VIEW active_connections AS
    SELECT 
        datname as database,
        usename as username,
        application_name,
        client_addr,
        client_port,
        backend_start,
        state,
        query_start,
        left(query, 100) as current_query
    FROM pg_stat_activity 
    WHERE state != 'idle'
    ORDER BY backend_start;
    
  03-sample-queries.sql: |
    -- Create sample queries for testing MCP functionality
    
    -- Quick stats function
    CREATE OR REPLACE FUNCTION get_quick_stats()
    RETURNS TABLE (
        metric_name TEXT,
        metric_value BIGINT
    ) AS $$
    BEGIN
        RETURN QUERY
        SELECT 'total_users'::TEXT, COUNT(*)::BIGINT FROM users
        UNION ALL
        SELECT 'total_products'::TEXT, COUNT(*)::BIGINT FROM products  
        UNION ALL
        SELECT 'total_orders'::TEXT, COUNT(*)::BIGINT FROM orders
        UNION ALL
        SELECT 'total_reviews'::TEXT, COUNT(*)::BIGINT FROM reviews
        UNION ALL
        SELECT 'active_products'::TEXT, COUNT(*)::BIGINT FROM products WHERE is_active = true
        UNION ALL
        SELECT 'pending_orders'::TEXT, COUNT(*)::BIGINT FROM orders WHERE status = 'pending';
    END;
    $$ LANGUAGE plpgsql;
    
    -- Search function for MCP testing
    CREATE OR REPLACE FUNCTION search_products(search_term TEXT)
    RETURNS TABLE (
        product_id INTEGER,
        product_name VARCHAR,
        price DECIMAL,
        category VARCHAR,
        avg_rating DECIMAL
    ) AS $$
    BEGIN
        RETURN QUERY
        SELECT 
            p.id,
            p.name,
            p.price,
            c.name as category,
            COALESCE(AVG(r.rating), 0) as avg_rating
        FROM products p
        LEFT JOIN categories c ON p.category_id = c.id
        LEFT JOIN reviews r ON p.id = r.product_id AND r.is_published = true
        WHERE p.is_active = true 
        AND (p.name ILIKE '%' || search_term || '%' 
             OR p.description ILIKE '%' || search_term || '%'
             OR search_term = ANY(p.tags))
        GROUP BY p.id, p.name, p.price, c.name
        ORDER BY avg_rating DESC, p.name;
    END;
    $$ LANGUAGE plpgsql;