// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/mcp.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MCPService_IngestEvent_FullMethodName  = "/mcp.v1.MCPService/IngestEvent"
	MCPService_StreamEvents_FullMethodName = "/mcp.v1.MCPService/StreamEvents"
	MCPService_EventStream_FullMethodName  = "/mcp.v1.MCPService/EventStream"
	MCPService_GetHealth_FullMethodName    = "/mcp.v1.MCPService/GetHealth"
	MCPService_GetMetrics_FullMethodName   = "/mcp.v1.MCPService/GetMetrics"
)

// MCPServiceClient is the client API for MCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MCPService defines the main service interface
type MCPServiceClient interface {
	// Ingest a single event
	IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error)
	// Stream events (server-side streaming)
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	// Bidirectional event streaming
	EventStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Event, Event], error)
	// Health check
	GetHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Get server metrics
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type mCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPServiceClient(cc grpc.ClientConnInterface) MCPServiceClient {
	return &mCPServiceClient{cc}
}

func (c *mCPServiceClient) IngestEvent(ctx context.Context, in *IngestEventRequest, opts ...grpc.CallOption) (*IngestEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestEventResponse)
	err := c.cc.Invoke(ctx, MCPService_IngestEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MCPService_ServiceDesc.Streams[0], MCPService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCPService_StreamEventsClient = grpc.ServerStreamingClient[Event]

func (c *mCPServiceClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Event, Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MCPService_ServiceDesc.Streams[1], MCPService_EventStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Event, Event]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCPService_EventStreamClient = grpc.BidiStreamingClient[Event, Event]

func (c *mCPServiceClient) GetHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, MCPService_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, MCPService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCPServiceServer is the server API for MCPService service.
// All implementations should embed UnimplementedMCPServiceServer
// for forward compatibility.
//
// MCPService defines the main service interface
type MCPServiceServer interface {
	// Ingest a single event
	IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error)
	// Stream events (server-side streaming)
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[Event]) error
	// Bidirectional event streaming
	EventStream(grpc.BidiStreamingServer[Event, Event]) error
	// Health check
	GetHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Get server metrics
	GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
}

// UnimplementedMCPServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMCPServiceServer struct{}

func (UnimplementedMCPServiceServer) IngestEvent(context.Context, *IngestEventRequest) (*IngestEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestEvent not implemented")
}
func (UnimplementedMCPServiceServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedMCPServiceServer) EventStream(grpc.BidiStreamingServer[Event, Event]) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedMCPServiceServer) GetHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedMCPServiceServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMCPServiceServer) testEmbeddedByValue() {}

// UnsafeMCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServiceServer will
// result in compilation errors.
type UnsafeMCPServiceServer interface {
	mustEmbedUnimplementedMCPServiceServer()
}

func RegisterMCPServiceServer(s grpc.ServiceRegistrar, srv MCPServiceServer) {
	// If the following call pancis, it indicates UnimplementedMCPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MCPService_ServiceDesc, srv)
}

func _MCPService_IngestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).IngestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_IngestEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).IngestEvent(ctx, req.(*IngestEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MCPServiceServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCPService_StreamEventsServer = grpc.ServerStreamingServer[Event]

func _MCPService_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MCPServiceServer).EventStream(&grpc.GenericServerStream[Event, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCPService_EventStreamServer = grpc.BidiStreamingServer[Event, Event]

func _MCPService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetMetrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MCPService_ServiceDesc is the grpc.ServiceDesc for MCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.v1.MCPService",
	HandlerType: (*MCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestEvent",
			Handler:    _MCPService_IngestEvent_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _MCPService_GetHealth_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _MCPService_GetMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _MCPService_StreamEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventStream",
			Handler:       _MCPService_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/mcp.proto",
}
