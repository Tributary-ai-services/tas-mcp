// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/mcp.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Event represents a structured event in the MCP system
type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType     string                 `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Source        string                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data          string                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"` // JSON data payload
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_proto_mcp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_mcp_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Event) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Event) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// IngestEventRequest represents a request to ingest an event
type IngestEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType     string                 `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Source        string                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data          string                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"` // JSON data payload
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestEventRequest) Reset() {
	*x = IngestEventRequest{}
	mi := &file_proto_mcp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestEventRequest) ProtoMessage() {}

func (x *IngestEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestEventRequest.ProtoReflect.Descriptor instead.
func (*IngestEventRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcp_proto_rawDescGZIP(), []int{1}
}

func (x *IngestEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *IngestEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *IngestEventRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *IngestEventRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IngestEventRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *IngestEventRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// IngestEventResponse represents the response to an event ingestion
type IngestEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestEventResponse) Reset() {
	*x = IngestEventResponse{}
	mi := &file_proto_mcp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestEventResponse) ProtoMessage() {}

func (x *IngestEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestEventResponse.ProtoReflect.Descriptor instead.
func (*IngestEventResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_proto_rawDescGZIP(), []int{2}
}

func (x *IngestEventResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *IngestEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *IngestEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IngestEventResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IngestEventResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// StreamEventsRequest represents a request to stream events
type StreamEventsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventTypes     []string               `protobuf:"bytes,1,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`              // Filter by event types
	StartTimestamp int64                  `protobuf:"varint,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"` // Start streaming from this timestamp
	Follow         bool                   `protobuf:"varint,3,opt,name=follow,proto3" json:"follow,omitempty"`                                       // Continue streaming new events
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StreamEventsRequest) Reset() {
	*x = StreamEventsRequest{}
	mi := &file_proto_mcp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsRequest) ProtoMessage() {}

func (x *StreamEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamEventsRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcp_proto_rawDescGZIP(), []int{3}
}

func (x *StreamEventsRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *StreamEventsRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *StreamEventsRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

// HealthCheckRequest represents a health check request
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_proto_mcp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcp_proto_rawDescGZIP(), []int{4}
}

// HealthCheckResponse represents a health check response
type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Healthy       bool                   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Details       map[string]string      `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uptime        int64                  `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_proto_mcp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_proto_rawDescGZIP(), []int{5}
}

func (x *HealthCheckResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *HealthCheckResponse) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

// MetricsRequest represents a request for server metrics
type MetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	mi := &file_proto_mcp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcp_proto_rawDescGZIP(), []int{6}
}

// MetricsResponse represents server metrics
type MetricsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalEvents     int64                  `protobuf:"varint,1,opt,name=total_events,json=totalEvents,proto3" json:"total_events,omitempty"`
	StreamEvents    int64                  `protobuf:"varint,2,opt,name=stream_events,json=streamEvents,proto3" json:"stream_events,omitempty"`
	ForwardedEvents int64                  `protobuf:"varint,3,opt,name=forwarded_events,json=forwardedEvents,proto3" json:"forwarded_events,omitempty"`
	ErrorEvents     int64                  `protobuf:"varint,4,opt,name=error_events,json=errorEvents,proto3" json:"error_events,omitempty"`
	ActiveStreams   int32                  `protobuf:"varint,5,opt,name=active_streams,json=activeStreams,proto3" json:"active_streams,omitempty"`
	Uptime          int64                  `protobuf:"varint,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	mi := &file_proto_mcp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_proto_rawDescGZIP(), []int{7}
}

func (x *MetricsResponse) GetTotalEvents() int64 {
	if x != nil {
		return x.TotalEvents
	}
	return 0
}

func (x *MetricsResponse) GetStreamEvents() int64 {
	if x != nil {
		return x.StreamEvents
	}
	return 0
}

func (x *MetricsResponse) GetForwardedEvents() int64 {
	if x != nil {
		return x.ForwardedEvents
	}
	return 0
}

func (x *MetricsResponse) GetErrorEvents() int64 {
	if x != nil {
		return x.ErrorEvents
	}
	return 0
}

func (x *MetricsResponse) GetActiveStreams() int32 {
	if x != nil {
		return x.ActiveStreams
	}
	return 0
}

func (x *MetricsResponse) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

var File_proto_mcp_proto protoreflect.FileDescriptor

const file_proto_mcp_proto_rawDesc = "" +
	"\n" +
	"\x0fproto/mcp.proto\x12\x06mcp.v1\"\x81\x02\n" +
	"\x05Event\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x1d\n" +
	"\n" +
	"event_type\x18\x02 \x01(\tR\teventType\x12\x16\n" +
	"\x06source\x18\x03 \x01(\tR\x06source\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12\x12\n" +
	"\x04data\x18\x05 \x01(\tR\x04data\x127\n" +
	"\bmetadata\x18\x06 \x03(\v2\x1b.mcp.v1.Event.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9b\x02\n" +
	"\x12IngestEventRequest\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x1d\n" +
	"\n" +
	"event_type\x18\x02 \x01(\tR\teventType\x12\x16\n" +
	"\x06source\x18\x03 \x01(\tR\x06source\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12\x12\n" +
	"\x04data\x18\x05 \x01(\tR\x04data\x12D\n" +
	"\bmetadata\x18\x06 \x03(\v2(.mcp.v1.IngestEventRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9a\x01\n" +
	"\x13IngestEventResponse\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12\x16\n" +
	"\x06status\x18\x05 \x01(\tR\x06status\"w\n" +
	"\x13StreamEventsRequest\x12\x1f\n" +
	"\vevent_types\x18\x01 \x03(\tR\n" +
	"eventTypes\x12'\n" +
	"\x0fstart_timestamp\x18\x02 \x01(\x03R\x0estartTimestamp\x12\x16\n" +
	"\x06follow\x18\x03 \x01(\bR\x06follow\"\x14\n" +
	"\x12HealthCheckRequest\"\xdf\x01\n" +
	"\x13HealthCheckResponse\x12\x18\n" +
	"\ahealthy\x18\x01 \x01(\bR\ahealthy\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12B\n" +
	"\adetails\x18\x03 \x03(\v2(.mcp.v1.HealthCheckResponse.DetailsEntryR\adetails\x12\x16\n" +
	"\x06uptime\x18\x04 \x01(\x03R\x06uptime\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x10\n" +
	"\x0eMetricsRequest\"\xe6\x01\n" +
	"\x0fMetricsResponse\x12!\n" +
	"\ftotal_events\x18\x01 \x01(\x03R\vtotalEvents\x12#\n" +
	"\rstream_events\x18\x02 \x01(\x03R\fstreamEvents\x12)\n" +
	"\x10forwarded_events\x18\x03 \x01(\x03R\x0fforwardedEvents\x12!\n" +
	"\ferror_events\x18\x04 \x01(\x03R\verrorEvents\x12%\n" +
	"\x0eactive_streams\x18\x05 \x01(\x05R\ractiveStreams\x12\x16\n" +
	"\x06uptime\x18\x06 \x01(\x03R\x06uptime2\xc8\x02\n" +
	"\n" +
	"MCPService\x12F\n" +
	"\vIngestEvent\x12\x1a.mcp.v1.IngestEventRequest\x1a\x1b.mcp.v1.IngestEventResponse\x12<\n" +
	"\fStreamEvents\x12\x1b.mcp.v1.StreamEventsRequest\x1a\r.mcp.v1.Event0\x01\x12/\n" +
	"\vEventStream\x12\r.mcp.v1.Event\x1a\r.mcp.v1.Event(\x010\x01\x12D\n" +
	"\tGetHealth\x12\x1a.mcp.v1.HealthCheckRequest\x1a\x1b.mcp.v1.HealthCheckResponse\x12=\n" +
	"\n" +
	"GetMetrics\x12\x16.mcp.v1.MetricsRequest\x1a\x17.mcp.v1.MetricsResponseB5Z3github.com/tributary-ai-services/tas-mcp/gen/mcp/v1b\x06proto3"

var (
	file_proto_mcp_proto_rawDescOnce sync.Once
	file_proto_mcp_proto_rawDescData []byte
)

func file_proto_mcp_proto_rawDescGZIP() []byte {
	file_proto_mcp_proto_rawDescOnce.Do(func() {
		file_proto_mcp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_mcp_proto_rawDesc), len(file_proto_mcp_proto_rawDesc)))
	})
	return file_proto_mcp_proto_rawDescData
}

var file_proto_mcp_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_mcp_proto_goTypes = []any{
	(*Event)(nil),               // 0: mcp.v1.Event
	(*IngestEventRequest)(nil),  // 1: mcp.v1.IngestEventRequest
	(*IngestEventResponse)(nil), // 2: mcp.v1.IngestEventResponse
	(*StreamEventsRequest)(nil), // 3: mcp.v1.StreamEventsRequest
	(*HealthCheckRequest)(nil),  // 4: mcp.v1.HealthCheckRequest
	(*HealthCheckResponse)(nil), // 5: mcp.v1.HealthCheckResponse
	(*MetricsRequest)(nil),      // 6: mcp.v1.MetricsRequest
	(*MetricsResponse)(nil),     // 7: mcp.v1.MetricsResponse
	nil,                         // 8: mcp.v1.Event.MetadataEntry
	nil,                         // 9: mcp.v1.IngestEventRequest.MetadataEntry
	nil,                         // 10: mcp.v1.HealthCheckResponse.DetailsEntry
}
var file_proto_mcp_proto_depIdxs = []int32{
	8,  // 0: mcp.v1.Event.metadata:type_name -> mcp.v1.Event.MetadataEntry
	9,  // 1: mcp.v1.IngestEventRequest.metadata:type_name -> mcp.v1.IngestEventRequest.MetadataEntry
	10, // 2: mcp.v1.HealthCheckResponse.details:type_name -> mcp.v1.HealthCheckResponse.DetailsEntry
	1,  // 3: mcp.v1.MCPService.IngestEvent:input_type -> mcp.v1.IngestEventRequest
	3,  // 4: mcp.v1.MCPService.StreamEvents:input_type -> mcp.v1.StreamEventsRequest
	0,  // 5: mcp.v1.MCPService.EventStream:input_type -> mcp.v1.Event
	4,  // 6: mcp.v1.MCPService.GetHealth:input_type -> mcp.v1.HealthCheckRequest
	6,  // 7: mcp.v1.MCPService.GetMetrics:input_type -> mcp.v1.MetricsRequest
	2,  // 8: mcp.v1.MCPService.IngestEvent:output_type -> mcp.v1.IngestEventResponse
	0,  // 9: mcp.v1.MCPService.StreamEvents:output_type -> mcp.v1.Event
	0,  // 10: mcp.v1.MCPService.EventStream:output_type -> mcp.v1.Event
	5,  // 11: mcp.v1.MCPService.GetHealth:output_type -> mcp.v1.HealthCheckResponse
	7,  // 12: mcp.v1.MCPService.GetMetrics:output_type -> mcp.v1.MetricsResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_proto_mcp_proto_init() }
func file_proto_mcp_proto_init() {
	if File_proto_mcp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_mcp_proto_rawDesc), len(file_proto_mcp_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_mcp_proto_goTypes,
		DependencyIndexes: file_proto_mcp_proto_depIdxs,
		MessageInfos:      file_proto_mcp_proto_msgTypes,
	}.Build()
	File_proto_mcp_proto = out.File
	file_proto_mcp_proto_goTypes = nil
	file_proto_mcp_proto_depIdxs = nil
}
